-- üî∞ BLINKIT DATA ANALYSIS (SQL for Power BI)
-- Author: Prince Kashav
-- Description: SQL queries for Blinkit dataset analysis and Power BI dashboard KPIs.
-- -------------------------------------------------------------

-- üß© 1. SEE ALL THE DATA IMPORTED
SELECT * FROM blinkit_data;


-- üßπ 2. DATA CLEANING: Standardize Item_Fat_Content values
-- Cleaning ensures consistency in reporting and analysis.
UPDATE blinkit_data
SET Item_Fat_Content = 
    CASE 
        WHEN Item_Fat_Content IN ('LF', 'low fat') THEN 'Low Fat'
        WHEN Item_Fat_Content = 'reg' THEN 'Regular'
        ELSE Item_Fat_Content
    END;

-- ‚úÖ CHECK IF DATA CLEANING IS SUCCESSFUL
SELECT DISTINCT Item_Fat_Content FROM blinkit_data;


-- üßÆ A. KPI‚Äôs
-- -------------------------------------------------------------

-- 1Ô∏è‚É£ TOTAL SALES (in millions)
SELECT CAST(SUM(Total_Sales) / 1000000.0 AS DECIMAL(10,2)) AS Total_Sales_Million
FROM blinkit_data;

-- 2Ô∏è‚É£ AVERAGE SALES
SELECT CAST(AVG(Total_Sales) AS INT) AS Avg_Sales
FROM blinkit_data;

-- 3Ô∏è‚É£ NUMBER OF ITEMS / ORDERS
SELECT COUNT(*) AS No_of_Orders
FROM blinkit_data;

-- 4Ô∏è‚É£ AVERAGE RATING
SELECT CAST(AVG(Rating) AS DECIMAL(10,1)) AS Avg_Rating
FROM blinkit_data;


-- üìä B. TOTAL SALES BY FAT CONTENT
SELECT Item_Fat_Content, 
       CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales
FROM blinkit_data
GROUP BY Item_Fat_Content;


-- üçΩÔ∏è C. TOTAL SALES BY ITEM TYPE
SELECT Item_Type, 
       CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales
FROM blinkit_data
GROUP BY Item_Type
ORDER BY Total_Sales DESC;


-- üè™ D. FAT CONTENT BY OUTLET FOR TOTAL SALES
SELECT Outlet_Location_Type, 
       ISNULL([Low Fat], 0) AS Low_Fat, 
       ISNULL([Regular], 0) AS Regular
FROM 
(
    SELECT Outlet_Location_Type, Item_Fat_Content, 
           CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales
    FROM blinkit_data
    GROUP BY Outlet_Location_Type, Item_Fat_Content
) AS SourceTable
PIVOT 
(
    SUM(Total_Sales) 
    FOR Item_Fat_Content IN ([Low Fat], [Regular])
) AS PivotTable
ORDER BY Outlet_Location_Type;

-- üí° Explanation:
-- This pivot query displays total sales for each combination of Outlet_Location_Type and Item_Fat_Content.
-- ISNULL replaces NULLs with 0 to ensure completeness of the report.


-- üèóÔ∏è E. TOTAL SALES BY OUTLET ESTABLISHMENT YEAR
SELECT Outlet_Establishment_Year, 
       CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales
FROM blinkit_data
GROUP BY Outlet_Establishment_Year
ORDER BY Outlet_Establishment_Year;


-- üìè F. PERCENTAGE OF SALES BY OUTLET SIZE
SELECT 
    Outlet_Size, 
    CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales,
    CAST((SUM(Total_Sales) * 100.0 / SUM(SUM(Total_Sales)) OVER()) AS DECIMAL(10,2)) AS Sales_Percentage
FROM blinkit_data
GROUP BY Outlet_Size
ORDER BY Total_Sales DESC;

-- üí° Explanation:
-- Calculates each Outlet_Size‚Äôs contribution to total sales in percentage terms.
-- Uses the window function SUM() OVER() to get total sales across all outlet sizes.


-- üåç G. SALES BY OUTLET LOCATION TYPE
SELECT Outlet_Location_Type, 
       CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales
FROM blinkit_data
GROUP BY Outlet_Location_Type
ORDER BY Total_Sales DESC;


-- üßæ H. ALL METRICS BY OUTLET TYPE
SELECT Outlet_Type, 
       CAST(SUM(Total_Sales) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(AVG(Total_Sales) AS DECIMAL(10,0)) AS Avg_Sales,
       COUNT(*) AS No_Of_Items,
       CAST(AVG(Rating) AS DECIMAL(10,2)) AS Avg_Rating,
       CAST(AVG(Item_Visibility) AS DECIMAL(10,2)) AS Item_Visibility
FROM blinkit_data
GROUP BY Outlet_Type
ORDER BY Total_Sales DESC;

-- ‚úÖ END OF SCRIPT

